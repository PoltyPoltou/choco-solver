/*
 * This file is part of choco-solver, http://choco-solver.org/
 *
 * Copyright (c) 2022, IMT Atlantique. All rights reserved.
 *
 * Licensed under the BSD 4-clause license.
 *
 * See LICENSE file in the project root for full license information.
 */
package org.chocosolver.solver.constraints.nary.knapsack;

public class KpInstance {
        // Number of items
        public final int N;
        // Number of knapsack
        public final int M;
        // energy associated with each item
        public final int[] c;
        // capacity of each knapsack
        public final int[] b;
        // weight in each knapsack associated with each item
        public final int[][] a;

        private KpInstance(int n, int m, int[] c, int[] b, int[][] a) {
                N = n;
                M = m;
                this.c = c;
                this.b = b;
                this.a = a;
        }

        public static KpInstance getInstance1() {
                int N = 50;
                int M = 5;
                int[] c = new int[] { 560, 1125, 300, 620, 2100, 431, 68, 328, 47, 122, 322, 196, 41, 25, 425, 4260,
                                416, 115, 82,
                                22, 631, 132, 420, 86, 42, 103, 215, 81, 91, 26, 49, 420, 316, 72, 71, 49, 108, 116, 90,
                                738, 1811, 430,
                                3060, 215, 58, 296, 620, 418, 47, 81 };
                int[] b = new int[] { 800, 650, 550, 550, 650 };
                int[][] a = new int[][] {
                                { 40, 91, 10, 30, 160, 20, 3, 12, 3, 18, 9, 25, 1, 1, 10, 280, 10, 8, 1, 1, 49, 8, 21,
                                                6, 1, 5, 10, 8, 2, 1,
                                                0, 10, 42, 6, 4, 8, 0, 10, 1, 40, 86, 11, 120, 8, 3, 32, 28, 13, 2, 4 },
                                { 16, 92, 41, 16, 150, 23, 4, 18, 6, 0, 12, 8, 2, 1, 0, 200, 20, 6, 2, 1, 70, 9, 22, 4,
                                                1, 5, 10, 6, 4, 0,
                                                4, 12, 8, 4, 3, 0, 10, 0, 6, 28, 93, 9, 30, 22, 0, 36, 45, 13, 2, 2 },
                                { 38, 39, 32, 71, 80, 26, 5, 40, 8, 12, 30, 15, 0, 1, 23, 100, 0, 20, 3, 0, 40, 6, 8, 0,
                                                6, 4, 22, 4, 6, 1,
                                                5, 14, 8, 2, 8, 0, 20, 0, 0, 6, 12, 6, 80, 13, 6, 22, 14, 0, 1, 2 },
                                { 8, 71, 30, 60, 200, 18, 6, 30, 4, 8, 31, 6, 3, 0, 18, 60, 21, 4, 0, 2, 32, 15, 31, 2,
                                                2, 7, 8, 2, 8, 0, 2,
                                                8, 6, 7, 1, 0, 0, 20, 8, 14, 20, 2, 40, 6, 1, 14, 20, 12, 0, 1 },
                                { 38, 52, 30, 42, 170, 9, 7, 20, 0, 3, 21, 4, 1, 2, 14, 310, 8, 4, 6, 1, 18, 15, 38, 10,
                                                4, 8, 6, 0, 0, 3,
                                                0, 10, 6, 1, 3, 0, 3, 5, 4, 0, 30, 12, 16, 18, 3, 16, 22, 30, 4, 0 }
                };
                return new KpInstance(N, M, c, b, a);
        }

        public static KpInstance getInstance2() {
                int N = 90;
                int M = 5;
                int[] c = new int[] { 360, 83, 59, 130, 431, 67, 230, 52, 93, 125, 670, 892, 600, 38, 48, 147, 78, 256,
                                63, 17,
                                120, 164, 432, 35, 92, 110, 22, 42, 50, 323, 514, 28, 87, 73, 78, 15, 26, 78, 210, 36,
                                85, 189, 274, 43,
                                33, 10, 19, 389, 276, 312, 94, 68, 73, 192, 41, 163, 16, 40, 195, 138, 73, 152, 400, 26,
                                14, 170, 205,
                                57, 369, 435, 123, 25, 94, 88, 90, 146, 55, 29, 82, 74, 100, 72, 31, 29, 316, 244, 70,
                                82, 90, 52 };

                int[] b = new int[] { 2100, 1100, 3300, 3700, 3600 };
                int[][] a = new int[][] {
                                { 7, 0, 30, 22, 80, 94, 11, 81, 70, 64, 59, 18, 0, 36, 3, 8, 15, 42, 9, 0, 42, 47, 52,
                                                32, 26, 48, 55,
                                                6, 29, 84, 2, 4, 18, 56, 7, 29, 93, 44, 71, 3, 86, 66, 31, 65, 0, 79,
                                                20, 65, 52, 13, 48, 14, 5,
                                                72, 14, 39, 46, 27, 11, 91, 15, 25, 0, 94, 53, 48, 27, 99, 6, 17, 69,
                                                43, 0, 57, 7, 21, 78, 10,
                                                37, 26, 20, 8, 4, 43, 17, 25, 36, 60, 84, 40 },
                                { 8, 66, 98, 50, 0, 30, 0, 88, 15, 37, 26, 72, 61, 57, 17, 27, 83, 3, 9, 66, 97, 42, 2,
                                                44, 71, 11, 25,
                                                74, 90, 20, 0, 38, 33, 14, 9, 23, 12, 58, 6, 14, 78, 0, 12, 99, 84, 31,
                                                16, 7, 33, 20, 5, 18,
                                                96, 63, 31, 0, 70, 4, 66, 9, 15, 25, 2, 0, 48, 1, 40, 31, 82, 79, 56,
                                                34, 3, 19, 52, 36, 95, 6,
                                                35, 34, 74, 26, 10, 85, 63, 31, 22, 9, 92, 18 },
                                { 3, 74, 88, 50, 55, 19, 0, 6, 30, 62, 17, 81, 25, 46, 67, 28, 36, 8, 1, 52, 19, 37, 27,
                                                62, 39, 84, 16,
                                                14, 21, 5, 60, 82, 72, 89, 16, 5, 29, 7, 80, 97, 41, 46, 15, 92, 51, 76,
                                                57, 90, 10, 37, 25, 93,
                                                5, 39, 0, 97, 6, 96, 2, 81, 69, 4, 32, 78, 65, 83, 62, 89, 45, 53, 52,
                                                76, 72, 23, 89, 48, 41,
                                                1, 27, 19, 3, 32, 82, 20, 2, 51, 18, 42, 4, 26 },
                                { 21, 40, 0, 6, 82, 91, 43, 30, 62, 91, 10, 41, 12, 4, 80, 77, 98, 50, 78, 35, 7, 1, 96,
                                                67, 85, 4, 23,
                                                38, 2, 57, 4, 53, 0, 33, 2, 25, 14, 97, 87, 42, 15, 65, 19, 83, 67, 70,
                                                80, 39, 9, 5, 41, 31,
                                                36, 15, 30, 87, 28, 13, 40, 0, 51, 79, 75, 43, 91, 60, 24, 18, 85, 83,
                                                3, 85, 2, 5, 51, 63, 52,
                                                85, 17, 62, 7, 86, 48, 2, 1, 15, 74, 80, 57, 16 },
                                { 94, 86, 80, 92, 31, 17, 65, 51, 46, 66, 44, 3, 26, 0, 39, 20, 11, 6, 55, 70, 11, 75,
                                                82, 35, 47, 99,
                                                5, 14, 23, 38, 94, 66, 64, 27, 77, 50, 28, 25, 61, 10, 30, 15, 12, 24,
                                                90, 25, 39, 47, 98, 83,
                                                56, 36, 6, 66, 89, 45, 38, 1, 18, 88, 19, 39, 20, 1, 7, 34, 68, 32, 31,
                                                58, 41, 99, 92, 67, 33,
                                                26, 25, 68, 37, 6, 11, 17, 48, 79, 63, 77, 17, 29, 18, 60 }
                };
                return new KpInstance(N, M, c, b, a);
        }
}
